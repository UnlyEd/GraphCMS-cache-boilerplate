service: gcms-cache-boilerplate
frameworkVersion: "=1.49.0"

plugins:
  # - serverless-plugin-epsagon # https://github.com/epsagon/serverless-plugin-epsagon XXX We don't use it because it's not compatible with the basic_auth authorizer, used by /read-cache
  - serverless-webpack # https://github.com/serverless-heaven/serverless-webpack
  - serverless-offline # See https://github.com/dherault/serverless-offline
  - '@unly/serverless-env-copy-plugin' # See https://github.com/UnlyEd/serverless-env-copy-plugin
  - serverless-domain-manager # See https://github.com/amplify-education/serverless-domain-manager
  - serverless-dotenv-plugin # See https://www.npmjs.com/package/serverless-dotenv-plugin

package:
  individually: true

custom:
  serverless-offline:
    port: 8085 # Update .env.development and .env.test if you ever change this
    showDuration: true
  environment: ${env:NODE_ENV, 'development'}
  envs:
    development: # XXX Used by both "development" and "test" environments
      profile:
      domain:
        name:
      memorySize:
      redis:
        url: 'localhost:6379'
        password: 'localpass'
      graphql:
        endpoint: 'https://api-euwest.graphcms.com/v1/cjyi8gl5m00tm01e91polc50t/master'
        token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ2ZXJzaW9uIjoxLCJ0b2tlbklkIjoiZWI4NTg3YjUtYjZhOS00ODE4LTliYjUtNWE4NDYwYjNmN2IxIn0.UQjYshD_MXM0eN1Jx0m6ODz3bvn6f9zhSJ45pbtEXKs'
      refreshCache:
        token: 'oCsaDgNY6YUe7x03GY8DoIBCYdGKn2UvKnO2Vb7uYhZbdxs7UbYi2yYy23vOytSteGStUrydyhJu1nTlC8jPNdUQgaqY6NKf2Z0F'
      basicAuth:
        username: 'admin'
        password: 'not-admin!'
      epsagon:
        token: ''
    demoStaging:
      profile: # TODO AWS profile to use for this environment - Useful if your staging and production apps don't live in the same AWS Account! (which is our case)
      domain:
        name: # TODO Your staging domain name
      memorySize: 256
      redis:
        url: # TODO Your staging redis endpoint url - Using redisLab, should be something like redis-aaa.aa.eu-west-1-2.ec2.cloud.redislabs.com:11111
        password: ${file(./secrets-${self:custom.environment}.yml):demo.REDIS_PASSWORD}
      graphql:
        endpoint: 'https://api-euwest.graphcms.com/v1/cjyi8gl5m00tm01e91polc50t/master'
        token: ${file(./secrets-${self:custom.environment}.yml):demo.GRAPHCMS_TOKEN}
      refreshCache:
        token: ${file(./secrets-${self:custom.environment}.yml):demo.REFRESH_CACHE_TOKEN}
      basicAuth:
        username: ${file(./secrets-${self:custom.environment}.yml):demo.BASIC_AUTH_USERNAME}
        password: ${file(./secrets-${self:custom.environment}.yml):demo.BASIC_AUTH_PASSWORD}
      epsagon:
        token: ${file(./secrets-${self:custom.environment}.yml):demo.EPSAGON_APP_TOKEN}
    demo:
      profile: # TODO AWS profile to use for this environment - Useful if your staging and production apps don't live in the same AWS Account! (which is our case)
      domain:
        name: # TODO Your production domain name
      memorySize: 256
      redis:
        url: # TODO Your production redis endpoint url - Using redisLab, should be something like redis-aaa.aa.eu-west-1-2.ec2.cloud.redislabs.com:11111
        password: ${file(./secrets-${self:custom.environment}.yml):demo.REDIS_PASSWORD}
      graphql: # XXX We strongly recommend to use a distinct staging and production environments (production is at /master by default)
        endpoint: # TODO Your production GraphQL endpoint
        token: ${file(./secrets-${self:custom.environment}.yml):demo.GRAPHCMS_TOKEN}
      refreshCache:
        token: ${file(./secrets-${self:custom.environment}.yml):demo.REFRESH_CACHE_TOKEN}
      basicAuth:
        username: ${file(./secrets-${self:custom.environment}.yml):demo.BASIC_AUTH_USERNAME}
        password: ${file(./secrets-${self:custom.environment}.yml):demo.BASIC_AUTH_PASSWORD}
      epsagon:
        token: ${file(./secrets-${self:custom.environment}.yml):demo.EPSAGON_APP_TOKEN}
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules:
      forceExclude:
        - aws-sdk
    packager: 'yarn'
    packagerOptions: {}
    excludeFiles: src/**/*.test.js
    keepOutputDirectory: true
  customDomain:
    enabled: true
    domainName: ${self:custom.envs.${self:provider.stage}.domain.name}
    stage: ${self:provider.stage}
    createRoute53Record: true

provider:
  name: aws
  runtime: nodejs10.x # AWS keeps up to date with the latest v10 version - See https://forum.serverless.com/t/node-10-lambdas-on-aws/8302/2
  versionFunctions: false # See https://serverless.com/framework/docs/providers/aws/guide/functions#versioning-deployed-functions
  logRetentionInDays: 60
  stage: ${opt:stage, 'development'}
  region: eu-west-1
  memorySize: ${self:custom.envs.${self:provider.stage}.memorySize, '128'}
  timeout: 30 # 30sec timeout, we perform long-running lambda sometimes (such as /refresh-cache)
  logs:
    restApi: true # Enable logs in other services, such as API GW - See https://serverless.com/blog/framework-release-v142/
  deploymentBucket:
    serverSideEncryption: AES256
  environment:
    NODE_ENV: ${self:custom.environment}
    REDIS_URL: ${self:custom.envs.${self:provider.stage}.redis.url, ''}
    REDIS_PASSWORD: ${self:custom.envs.${self:provider.stage}.redis.password, ''}
    GRAPHCMS_ENDPOINT: ${self:custom.envs.${self:provider.stage}.graphql.endpoint, ''}
    GRAPHCMS_TOKEN: ${self:custom.envs.${self:provider.stage}.graphql.token, ''}
    REFRESH_CACHE_TOKEN: ${self:custom.envs.${self:provider.stage}.refreshCache.token, ''}
    BASIC_AUTH_USERNAME: ${self:custom.envs.${self:provider.stage}.basicAuth.username, ''}
    BASIC_AUTH_PASSWORD: ${self:custom.envs.${self:provider.stage}.basicAuth.password, ''}
    EPSAGON_APP_NAME: ${self:service}-${self:provider.stage}-${self:custom.environment}
    CACHE_BASE_URL: https://${self:custom.envs.${self:provider.stage}.domain.name}
  profile: ${self:custom.envs.${self:provider.stage}.profile, ''}
  stackTags:
    env: ${self:custom.environment}
    stage: ${self:provider.stage}
    region: ${self:provider.region}
    service: ${self:service}
    service-type: api
    runtime: ${self:provider.runtime}

functions:
  cache-query:
    handler: src/functions/epsagon.cacheQuery
    events:
      - http:
          method: POST
          path: /cache-query
          cors: # XXX See https://serverless.com/blog/cors-api-gateway-survival-guide/
            origin: '*' # Same as "Access-Control-Allow-Origin"
            headers: # Same as "Access-Control-Allow-Headers"
              # Standard default headers
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              # Additional headers - Specific to this app
              - gcms-locale
              - gcms-locale-no-default
            allowCredentials: false

  reset-cache:
    handler: src/functions/epsagon.resetCache
    # XXX Ensures the lambda always has one slot available, and never use more than one lambda instance at once.
    #  Avoids GraphCMS webhooks to abuse our lambda (GCMS will trigger the webhook once per create/update/delete operation)
    #  This makes sure only one instance of that lambda can run at once, to avoid refreshing the cache with parallel runs
    #  Avoids flushing the redis DB multiple times at the same time
    #  See https://itnext.io/the-everything-guide-to-lambda-throttling-reserved-concurrency-and-execution-limits-d64f144129e5
    reservedConcurrency: 1
    events:
      - http:
          method: POST
          path: /reset-cache
          cors: true

  refresh-cache:
    handler: src/functions/refresh-cache.refreshCache # FIXME Don't use epsagon wrapper - creates an infinite loop (see slack)
    # XXX Ensures the lambda always has one slot available, and never use more than one lambda instance at once.
    #  Avoids GraphCMS webhooks to abuse our lambda (GCMS will trigger the webhook once per create/update/delete operation)
    #  This makes sure only one instance of that lambda can run at once, to avoid refreshing the cache with parallel runs
    #  Avoids spawning tons of API calls (most of them would timeout anyway, around 80%)
    #  See https://itnext.io/the-everything-guide-to-lambda-throttling-reserved-concurrency-and-execution-limits-d64f144129e5
    reservedConcurrency: 1
    events:
      - http:
          method: POST
          path: /refresh-cache
          cors: true

  status:
    handler: src/functions/status.status # Don't trace status route
    events:
      - http:
          method: GET
          path: /status
          cors: true

  read-cache:
    handler: src/functions/epsagon.readCache
    events:
      - http:
          method: GET
          path: /read-cache
          cors: true
          authorizer: # See https://medium.com/@Da_vidgf/http-basic-auth-with-api-gateway-and-serverless-5ae14ad0a270
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: request
  authorizer:
    handler: src/authorizers/basic-auth.handler # A Basic-Auth authentication is required in non-local environments

resources:
  Conditions:
    IsProduction:
      Fn::Equals:
        - ${self:custom.environment}
        - "production"
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.WWW-Authenticate: "'Basic'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
      # XXX Health check is meant to check if /status endpoint replies properly, it doesn't check internal behaviour.
      #  Also, it doesn't warm any endpoint but /status. And it won't configure alerts automatically.
      #  Feel free to enable it if you need it, it will increase your cost, though.
      #  XXX P.S: We are looking for a better way to perform health checks, AWS is too "heavy", too many useless calls are sent and we couldn't configure alerts automatically to hit our slack channel - If you know of a better way, please share!
#    healthCheck:
#      Condition: IsProduction # Only deploy HealthCheck in production environment
#      Type: "AWS::Route53::HealthCheck"
#      Properties:
#        HealthCheckConfig:
#          EnableSNI: true
#          FailureThreshold: "3"
#          FullyQualifiedDomainName: ${self:custom.envs.${self:provider.stage}.domain.name}
#          ResourcePath: "/status" # XXX Optimize cost by hitting a simple endpoint which doesn't download anything and avoid cost due to data transfer (S3, API Gateway)
#          MeasureLatency: false # XXX Cost $1/stage/month ($2/month for staging + production, for a single customer)
#          Port: "80"
#          Regions: # XXX Only check from UE/US (minimum 3 regions is required), cost much less money and not useful to check from all datacenters in the world
#            - 'eu-west-1' # Ireland
#            - 'us-west-1' # California
#            - 'us-east-1' # Virginia
#          RequestInterval: "30" # 30 is the max allowed
#          Type: "HTTPS"
#        HealthCheckTags:
#          - Key: "env"
#            Value: ${self:custom.environment}
#          - Key: "stage"
#            Value: ${self:provider.stage}
#          - Key: "region"
#            Value: ${self:provider.region}
#          - Key: "service"
#            Value: ${self:service}
#          - Key: "service-type"
#            Value: api
